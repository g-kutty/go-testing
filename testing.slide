Testing

Golang testing tips & tricks
11:30 04 Oct 2018
Tags: testing, golang, techniques

Georgekutty
Go Developer, Qburst
qb.kutty@gmail.com

* Basic

* Testing Go Code

➩ Go has built-in testing *framework*.

➩ It is provided by the *testing* package and the *go* *test* command.

➩ Here is a complete test file that tests the strings.Index function:

.code -edit examples/techniques/unit/index_test.go

* Table-driven test

➩ Go's sturct literal syntax makes it easy to write table-driven tests:

.code -edit examples/techniques/table/index_test.go /^func TestIndex/,/^}/

* Argument - T

➪ The **testing.T* argument is used for error reporting and logging:

    t.Errorf("got bar = %v, want %v", got, want)
    t.Fatalf("Frobnicate(%v) returned error: %v", arg, err)
    t.Logf("iteration %v", i)

➪ Controlling whether a test runs at all:

    if runtime.GOARCH == "arm" {
        t.Skip("this does't work on ARM")
    }

* Running tests

➪ The *go* *test* command runs tests for the specified package.(It defaults to the package in the current directory.)

    $ go test -v
    === RUN   TestIndex
    --- PASS: TestIndex (0.00s)
    PASS
    ok  	github.com/g-kutty/go-testing/examples/unit	0.002s

➪ To run the tests for all my projects:

    $ go test github/g-kutty/go-testing/...

➪ To run the tests for the standard library:

    $ go test fmt

* 

.link https://golang.org/cmd/go/#hdr-Testing_flags More test flags 

* Test coverage

➪ The go tool can report test coverage statistics.

    $ go test -cover
    
    PASS
    === RUN   TestSize
    --- PASS: TestSize (0.00s)
    PASS
    coverage: 37.5% of statements
    ok  	github.com/g-kutty/go-testing/examples/coverage	0.002s

➪ The go tool can generate coverage profiles that may be intepreted by the cover tool.

    $ go test -coverprofile=cover.out
    $ go tool cover -func=cover.out

    github.com/g-kutty/go-testing/examples/coverage/example.go:7:	main		0.0%
    github.com/g-kutty/go-testing/examples/coverage/example.go:12:	size		42.9%
    total:								(statements)	37.5%


* Test visualization

➪ The go tool allows you to  see a visual of what is and is not covered.

    $ go tool cover -html=cover.out

.image images/coverage.png 450 650

* Advanced Techniques

* Testing HTTP clients and servers

➪ The *net/http/httptest* package provides helpers for testing code that makes for serves HTTP requests.

* httptest.servers

➪ An *httptest.Server* listens on a system-chosen port on the local loopback interface, for use in end-to-end HTTP tests.

    type Server struct {
        URL      string // base URL of form http://ipaddr:port with no trailing slash
        Listener net.Listener

        // TLS is the optional TLS configuration, populated with a new config
        // after TLS is started. If set on an unstarted server before StartTLS
        // is called, existing fields are copied into the new config.
        TLS *tls.Config

        // Config may be changed after calling NewUnstartedServer and
        // before Start or StartTLS.
        Config *http.Server
        // contains filtered or unexported fields
    }

* 

➪ *NewServer* starts and returns a new Server. The caller should call Close when finished, to shut it down.

    func NewServer(handler http.Handler) *Server

➪ *Close* shuts down the server and blocks until all outstanding requests on this server have completed.  

    func (s *Server) Close()

* httptest.Server in action

➪ This code sets up a temporary HTTP server that serves a simple "Hello" response.

.play -edit examples/http_server/example.go /^func main/,/^}/

* httptest.ResponseRecorder

➪ ResponseRecorder is an implementation of *http.ResponseWriter* that records its mutations for later inspection in tests.

    type ResponseRecorder struct {
        Code int // the HTTP response code from WriteHeader
        HeaderMap http.Header // the HTTP response headers
        Body *bytes.Buffer // if non-nil, the bytes.Buffer to append written data to
        Flushed bool
    }

* httptest.ResponseRecorder in action

➪ By passing a ResponseRecorder into an HTTP handler we can inspect the generated response.

.play -edit examples/response_recorder/example.go /^func main/,/^}/

* Race Detection

➪ A *data* *race* occurs when two goroutines access the same variable concurrently and at least one of the access is a write.

➪ To help diagnose such bugs, Go includes a built-in data *race* detector.

➪ Pass the *-race* flag to the go tool to enable the race detector:

    $ go test -race mypkg    // to test the package
    $ go run -race mysrc.go  // to run the source file
    $ go build -race mycmd   // to build the command
    $ go install -race mypkg // to install the package 

* Subtests

➪ Go *1.7* introduces a Run method for creating subtests

.code -edit examples/techniques/sub/sub_test.go /^func TestPrimeSequential/,/^}/

* 

➪ Run a group of tests in *parallel*

.code -edit examples/techniques/sub/sub_parallel_test.go /^func TestPrimeParallel/,/^}/

➪ The outer test will not complete until all parallel tests started by Run have completed. As a result, no other parallel tests can run in parallel to these parallel tests.


* Finding errors with static analysis: vet

➪ The vet tool checks code for common programmer mistakes:

- bad printf formats,

- bad build tags,

- bad range loop variable use in closures,

- useless assignments,

- unreachable code,

- bad use of mutexes,

- and more.

➪ Usage:

    go vet [package]go vet [package]

* Testing from the inside

- Most tests are compiled as part of the package under test.

- This means they can access unexported details, as we have already seen.

* Testing from the outside

➪ Occasionally you want to run your tests from *outside* the package under test.

➪ Test files as package `foo_test` instead of package foo.

➪ This can break dependency cycles. For example:

- The `testing` package uses `fmt`.

- The fmt tests must import `testing`.
 
- So the fmt tests are in package `fmt_test` and can import both `testing` and `fmt`.